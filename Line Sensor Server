#include <ESP8266WiFi.h>
#include <espnow.h>
#include <Encoder.h>
#include <EEPROM.h>

// MAC address of the ESP32 receiver
uint8_t broadcastAddress[] = {0xD8, 0x3B, 0xDA, 0x4E, 0x08, 0x0C};

#define ENCODER_PIN_A 14  // D5 on NodeMCU
#define ENCODER_PIN_B 12  // D6 on NodeMCU

Encoder myEncoder(ENCODER_PIN_A, ENCODER_PIN_B);

// EEPROM configuration
#define EEPROM_SIZE 512
#define PULSES_PER_FOOT_ADDR 0
#define EEPROM_MAGIC_ADDR 4
#define EEPROM_MAGIC_VALUE 0xCAFEBABE

// Constants for encoder calculations
float PULSES_PER_FOOT = 646; // Default value, will be loaded from EEPROM
const float DEFAULT_PULSES_PER_FOOT = 646;
const float MIN_PULSES_PER_FOOT = 50;
const float MAX_PULSES_PER_FOOT = 1000;
const unsigned long MOVEMENT_TIMEOUT = 800;
const float ZERO_POSITION_TOLERANCE = 3230; // Pulses, adjust as needed
const unsigned long IDLE_TIME_THRESHOLD = 5000; // 5 seconds at zero before enabling calibration

// Global variables
long encoderPos = 0;
long currentMillis = 0;
unsigned long lastMovement = 0;
bool timerRunning = false;
unsigned long timerStartTime = 0;
unsigned long lastElapsedTime = 0;
unsigned long totalFlightTime = 0;
int flightCount = 0;
bool hasLeftZero = false;
bool hasReachedThreshold = false;

// State management for calibration
enum SystemState {
  TRACKING,  // Active tracking, no calibration listening
  IDLE       // Idle at zero, calibration listening enabled
};
SystemState currentState = TRACKING;
unsigned long zeroStartTime = 0;

// Packed structure to avoid padding issues
typedef struct __attribute__((packed)) encoder_message {
  long pos;
  float distance;
  bool timer_running;
  unsigned long elapsed_time;
  unsigned long total_time;
  int flight_count;
} encoder_message;

// Calibration message structure
typedef struct __attribute__((packed)) calibration_message {
  char header[8];  // "CALIB01" for identification
  float new_pulses_per_foot;
  uint32_t checksum;
} calibration_message;

// Global message structure
encoder_message dataToSend;

// Timing control
unsigned long lastSendTime = 0;
const unsigned long SEND_INTERVAL = 100; // Send data every 100ms

// Function prototypes
void processEncoderMovement();
void checkTimerStatus();
void updateDataAndSend();
void updateSystemState();
void loadPulsesPerFootFromEEPROM();
void savePulsesPerFootToEEPROM();
bool isValidPulsesPerFoot(float value);
uint32_t calculateChecksum(const calibration_message* msg);

void OnDataRecv(uint8_t *mac, uint8_t *incomingData, uint8_t len) {
  //Serial.println("\n--- OnDataRecv Triggered ---");
  //Serial.print("Packet received from: ");
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  //Serial.println(macStr);
  
  //Serial.print("Current State: ");
  //Serial.println(currentState == IDLE ? "IDLE (Listening)" : "TRACKING (Ignoring)");

  // Only process calibration messages when in IDLE state
  if (currentState != IDLE) {
    //Serial.println("REJECT: Not in IDLE state.");
    //Serial.println("--------------------------");
    return;
  }
    //Serial.print("Received Data Length: ");
    //Serial.println(len);
    //Serial.print("Expected Struct Size: ");
    //Serial.println(sizeof(calibration_message));
    
    // Check length
    if (len != sizeof(calibration_message)) {
      //  Serial.println("REJECT: Received message has the wrong size.");
      //  Serial.println("--------------------------");
        return;
    }
    
    calibration_message* msg = (calibration_message*)incomingData;
    
    // Check header
    char header_buf[8];
    strncpy(header_buf, msg->header, 7);
    header_buf[7] = '\0';
    //Serial.print("Received Header: '");
    //Serial.print(header_buf);
    //Serial.println("'");
    if (strncmp(msg->header, "CALIB01", 7) != 0) {
      //  Serial.println("REJECT: Received message has the wrong header.");
      //  Serial.println("--------------------------");
        return;
    }
    
    // Verify checksum
    uint32_t receivedChecksum = msg->checksum;
    uint32_t expectedChecksum = calculateChecksum(msg);
    //Serial.print("Received Checksum: ");
    //Serial.println(receivedChecksum);
    //Serial.print("Calculated Checksum: ");
    //Serial.println(expectedChecksum);
    if (receivedChecksum != expectedChecksum) {
      //  Serial.println("REJECT: Invalid checksum.");
      //  Serial.println("--------------------------");
        return;
    }
    
    // Validate range
    float receivedValue = msg->new_pulses_per_foot;
    //Serial.print("Received Pulses Per Foot value: ");
    //Serial.println(receivedValue);
    if (!isValidPulsesPerFoot(receivedValue)) {
   //     Serial.println("REJECT: Value is out of valid range.");
     //   Serial.println("--------------------------");
        return;
    }
    
    // If we get here, the message is valid!
    //Serial.println("SUCCESS: Message is valid. Updating value.");
    PULSES_PER_FOOT = receivedValue;
    savePulsesPerFootToEEPROM();
    const char* ackMessage = "CALIBOK";
  // The return type is uint8_t for the ESP8266, not esp_err_t
  uint8_t result = esp_now_send(broadcastAddress, (uint8_t*)ackMessage, strlen(ackMessage));
  
  if (result == 0) {
      //Serial.println("Sent CALIBOK acknowledgment successfully.");
  } else {
      //Serial.print("Error sending acknowledgment. Error code: ");
      //Serial.println(result);
  }
 //   Serial.println("--------------------------");
}

void setup() {
  Serial.begin(115200);
  
  // Wait for serial to initialize
  delay(1000);
  
 // Serial.println("\nESP8266 Encoder Sender Starting");
  
  // Initialize EEPROM and load saved value
  EEPROM.begin(EEPROM_SIZE);
  loadPulsesPerFootFromEEPROM();
  
  //Serial.print("Using PULSES_PER_FOOT: ");
 // Serial.println(PULSES_PER_FOOT);

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);
  wifi_set_channel(1);
  WiFi.disconnect();  // Ensure we're disconnected from any AP

 // Serial.print("ESP8266 MAC Address: ");
  //Serial.println(WiFi.macAddress());

  // Init ESP-NOW
  if (esp_now_init() != 0) {
   // Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Set role and register callbacks
  esp_now_set_self_role(ESP_NOW_ROLE_COMBO);
 // esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv);  // Register receive callback

  // Register peer (ESP32) - ESP8266 version
  if (esp_now_add_peer(broadcastAddress, ESP_NOW_ROLE_SLAVE, 1, NULL, 0) != 0) {
    Serial.println("Failed to add peer");
    return;
  }
  
  //Serial.println("ESP-NOW initialized and peer registered");
  //Serial.println("Encoder monitoring started");
  //Serial.println("Calibration listening will be enabled when idle at zero position");
}

void loop() {
  currentMillis = millis();
  processEncoderMovement();
  updateSystemState();
  checkTimerStatus();

  unsigned long currentTime = currentMillis;
  if (currentTime - lastSendTime >= SEND_INTERVAL) {
    updateDataAndSend();
    lastSendTime = currentTime;
  }
}

void processEncoderMovement() {
  long newPos = myEncoder.read();
  float FLIGHT_DISTANCE_THRESHOLD = 5 * PULSES_PER_FOOT;

  if (newPos != encoderPos) {
    encoderPos = newPos;
    lastMovement = currentMillis; // update last movement time

    if (abs(encoderPos) <= ZERO_POSITION_TOLERANCE) {
      if (hasReachedThreshold) {
        if (timerRunning) {
          lastElapsedTime = currentMillis - timerStartTime;
          totalFlightTime += lastElapsedTime;
          timerRunning = false;
        }
        hasReachedThreshold = false;
        hasLeftZero = false;
      }
    } else {
      hasLeftZero = true;
      if (!hasReachedThreshold && abs(encoderPos) >= FLIGHT_DISTANCE_THRESHOLD) {
        hasReachedThreshold = true;
        flightCount++;
        timerRunning = true;
        timerStartTime = currentMillis;
      }
    }
  }
}

void updateSystemState() {
  // Check if encoder has been idle (no movement) for MOVEMENT_TIMEOUT
  bool encoderIdle = (currentMillis - lastMovement > MOVEMENT_TIMEOUT);
  
  if (encoderIdle) {
    if (currentState == TRACKING) {
      currentState = IDLE;
    //  Serial.println("Entered IDLE state - calibration listening enabled");
    }
  } else {
    if (currentState == IDLE) {
      currentState = TRACKING;
      //Serial.println("Entered TRACKING state - calibration listening disabled");
    }
  }
}


void checkTimerStatus() {
  if (timerRunning && (currentMillis - lastMovement > MOVEMENT_TIMEOUT)) {
    if (abs(encoderPos) <= ZERO_POSITION_TOLERANCE) {
      lastElapsedTime = currentMillis - timerStartTime;
      totalFlightTime += lastElapsedTime;
      timerRunning = false;
    }
  }
}

void updateDataAndSend() {
  float currentDistance = encoderPos / PULSES_PER_FOOT;
  unsigned long currentElapsedTime = timerRunning ? (currentMillis - timerStartTime) : lastElapsedTime;

  // Update struct
  dataToSend.pos = encoderPos;
  dataToSend.distance = currentDistance;
  dataToSend.timer_running = timerRunning;
  dataToSend.elapsed_time = currentElapsedTime;
  dataToSend.total_time = totalFlightTime;
  dataToSend.flight_count = flightCount;

  // Send data
  uint8_t result = esp_now_send(broadcastAddress, (uint8_t *)&dataToSend, sizeof(dataToSend));
}

void loadPulsesPerFootFromEEPROM() {
  uint32_t magic;
  EEPROM.get(EEPROM_MAGIC_ADDR, magic);
  
  if (magic == EEPROM_MAGIC_VALUE) {
    float savedValue;
    EEPROM.get(PULSES_PER_FOOT_ADDR, savedValue);
    
    if (isValidPulsesPerFoot(savedValue)) {
      PULSES_PER_FOOT = savedValue;
      //Serial.print("Loaded PULSES_PER_FOOT from EEPROM: ");
      //Serial.println(PULSES_PER_FOOT);
    } else {
      //Serial.println("Invalid value in EEPROM, using default");
      PULSES_PER_FOOT = DEFAULT_PULSES_PER_FOOT;
      savePulsesPerFootToEEPROM(); // Save the default value
    }
  } else {
    //Serial.println("No valid data in EEPROM, using default");
    PULSES_PER_FOOT = DEFAULT_PULSES_PER_FOOT;
    savePulsesPerFootToEEPROM(); // Save the default value
  }
}

void savePulsesPerFootToEEPROM() {
  EEPROM.put(PULSES_PER_FOOT_ADDR, PULSES_PER_FOOT);
  EEPROM.put(EEPROM_MAGIC_ADDR, EEPROM_MAGIC_VALUE);
  EEPROM.commit();
  //Serial.print("Saved PULSES_PER_FOOT to EEPROM: ");
  //Serial.println(PULSES_PER_FOOT);
}

bool isValidPulsesPerFoot(float value) {
  return (value >= MIN_PULSES_PER_FOOT && value <= MAX_PULSES_PER_FOOT && !isnan(value) && !isinf(value));
}

uint32_t calculateChecksum(const calibration_message* msg) {
  uint32_t checksum = 0;
  const uint8_t* data = (const uint8_t*)msg;
  
  // Calculate checksum over header and new_pulses_per_foot, excluding checksum field
  for (size_t i = 0; i < sizeof(calibration_message) - sizeof(uint32_t); i++) {
    checksum += data[i];
  }
  
  return checksum;
}
