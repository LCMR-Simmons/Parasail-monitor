#include <Arduino_GFX_Library.h>
#include <esp_now.h>
#include <WiFi.h>
#include "TAMC_GT911.h"
#include <Preferences.h>
#include "FreeSansBold18pt7b.h"  // Add your custom font header

// Display Configuration for ESP32-8048S050
#define GFX_BL 2

Arduino_ESP32RGBPanel *rgbpanel = new Arduino_ESP32RGBPanel(
    40, 41, 39, 42,
    45, 48, 47, 21, 14,
    5, 6, 7, 15, 16, 4,
    8, 3, 46, 9, 1,
    0, 8, 4, 8,
    0, 8, 4, 8,
    1, 16000000, false,
    0, 0);

Arduino_RGB_Display *gfx = new Arduino_RGB_Display(800, 480, rgbpanel, 0, true);

// GT911 Touch Configuration
#define TOUCH_SCL 20
#define TOUCH_SDA 19 
#define TOUCH_RST 38
#define TOUCH_INT -1
#define TOUCH_WIDTH 800
#define TOUCH_HEIGHT 480
TAMC_GT911 touch(TOUCH_SDA, TOUCH_SCL, TOUCH_INT, TOUCH_RST, TOUCH_WIDTH, TOUCH_HEIGHT);

// Alert state enum
enum AlertState {
  ALERT_NORMAL,
  ALERT_TIME_EXCEEDED,
  ALERT_DANGER
};

// Screen state enum
enum ScreenState {
  MAIN_SCREEN,
  SETTINGS_SCREEN
};

struct SettingItem {
  String name;
  float value;
  float minValue;
  float maxValue;
  float increment;
  String unit;
};

// Constants
#define MAX_SETTINGS_ITEMS 3

// Settings and preferences
Preferences preferences;
ScreenState currentScreen = MAIN_SCREEN;
int currentSettingIndex = 0;

float WARNING_DISTANCE = 500.0;  
float DANGER_OFFSET = 20.0;      
unsigned long TIME_THRESHOLD = 420000;  // 7 minutes

SettingItem settings[MAX_SETTINGS_ITEMS] = {
  {"Warning Distance", WARNING_DISTANCE, 300.0, 510.0, 5.0, "ft"},
  {"Danger Offset", DANGER_OFFSET, 10.0, 50.0, 5.0, "ft"},  
  {"Time of Flight", TIME_THRESHOLD / 60000, 5.0, 15.0, 0.5, "min"}
};

// Synchronization
SemaphoreHandle_t displayMutex;
//esp8266 mac 48:3F:DA:04:1B:C7
// Timing configuration
const unsigned long lastDataTimeout = 5000;

// State tracking
unsigned long lastDataReceived = 0;
bool connected = false;
bool screenTransition = false;
AlertState currentAlertState = ALERT_NORMAL;
AlertState previousAlertState = ALERT_NORMAL;

// Colors
#define BG_COLOR BLACK
#define TEXT_COLOR WHITE
#define NORMAL_COLOR GREEN
#define WARNING_COLOR YELLOW
#define DANGER_COLOR RED
#define BUTTON_COLOR DARKGREY
#define SAVE_COLOR GREEN

// OPTIMIZATION: More efficient text bounds tracking
struct OptimizedTextBounds {
  int16_t x, y;
  uint16_t w, h;
  bool valid;
  String lastText; // Track last text to avoid unnecessary clears
};

// Track previous text bounds with text content
OptimizedTextBounds lastDistanceBounds = {0, 0, 0, 0, false, ""};
OptimizedTextBounds lastTimerBounds = {0, 0, 0, 0, false, ""};
OptimizedTextBounds lastAlertBounds = {0, 0, 0, 0, false, ""};

// Data structure for encoder information
struct EncoderData {
  long rawPosition = 0;
  float distanceFeet = 0.0;
  bool timerRunning = false;
  uint32_t elapsedTime = 0;
  uint32_t totalFlightTime = 0;
  int flightCount = 0;
  String status = "NORMAL";
 
  // Previous values for change detection
  float prevDistanceFeet = -999.0;
  bool prevTimerRunning = false;
  String prevStatus = "";
  int prevFlightCount = -1;
  uint32_t prevElapsedTime = 0;
  uint32_t prevTotalTime = 0;

  // OPTIMIZATION: Add cached formatted strings to avoid repeated formatting
  String cachedDistanceText = "";
  String cachedTimeText = "";
  String cachedTotalText = "";
  bool distanceTextDirty = true;
  bool timeTextDirty = true;
  bool totalTextDirty = true;
};

EncoderData encoderData;

// Screen layout coordinates - adjusted for custom font
struct ScreenLayout {
  int titleX = 20, titleY = 20;
  int statusX = 600, statusY = 20;
  int distanceY = 80, distanceHeight = 180;
  int timerY = 260, timerHeight = 130;
  int flightTotalY = 430, flightTotalHeight = 50;
  int settingFirstY = 80, settingSpacing = 80, settingHeight = 60;
  int valueX = 300, minusX = 500, plusX = 650;
  int buttonWidth = 80, buttonHeight = 60;
  int saveX = 300, saveY = 380, saveWidth = 200, saveHeight = 80;
  int titleTouchWidth = 350, titleTouchHeight = 50;
  int alertOverlayY = 50, alertOverlayHeight = 140;
} layout;

// Function prototypes
void showConnectingScreen();
void updateDisplayFull();
void updateDistanceDisplay(bool force = false);
void updateTimerDisplay(bool force = false);
void updateFlightAndTotalDisplay(bool force = false);
String formatTime(unsigned long timeInMillis);
String formatTimeForSettings(float timeInMinutes);
bool handleSettingsTouch(int touchX, int touchY);
void drawSettingsScreen();
void saveSettings();
void loadSettings();
bool isTitleTouched(int touchX, int touchY);
AlertState getCurrentAlertState();
void OnDataRecv(const esp_now_recv_info_t *esp_now_info, const uint8_t *data, int data_len);
void displayUpdateTask(void *parameter);
void touchPollTask(void *parameter);
void drawAlertOverlay(AlertState alertState, bool flashState);
void clearOptimizedTextBounds(OptimizedTextBounds &bounds);
OptimizedTextBounds getOptimizedTextBounds(const String& text, int x, int y, bool useCustomFont = false);
void drawCustomText(const String& text, int x, int y, uint16_t color, bool center = false);
void updateCachedStrings(); // New function to update cached formatted strings

AlertState getCurrentAlertState() {
  // Check distance-based danger first
  if (encoderData.status == "DANGER") {
    return ALERT_DANGER;
  }
  
  // Check time-based alert properly
  if (encoderData.timerRunning && encoderData.elapsedTime >= TIME_THRESHOLD) {
    return ALERT_TIME_EXCEEDED;
  }
  
  return ALERT_NORMAL;
}

void updateCachedStrings() {
    // Only update distance cache if it actually changed significantly
    if (encoderData.distanceTextDirty || 
        abs(encoderData.distanceFeet - encoderData.prevDistanceFeet) >= 0.1) {
        char distStr[10];
        sprintf(distStr, "%.1f", encoderData.distanceFeet);
        String newDistanceText = String(distStr);
        
        // Only mark as dirty if the formatted string actually changed
        if (newDistanceText != encoderData.cachedDistanceText) {
            encoderData.cachedDistanceText = newDistanceText;
            encoderData.distanceTextDirty = false;
        }
    }
    
    // Only update time cache if seconds changed
    unsigned long currentSeconds = encoderData.elapsedTime / 1000;
    unsigned long prevSeconds = encoderData.prevElapsedTime / 1000;
    
    if (encoderData.timeTextDirty || currentSeconds != prevSeconds) {
        String newTimeText = formatTime(encoderData.elapsedTime);
        
        if (newTimeText != encoderData.cachedTimeText) {
            encoderData.cachedTimeText = newTimeText;
            encoderData.timeTextDirty = false;
        }
    }
    
    // Update total cache only when needed
    if (encoderData.totalTextDirty || 
        encoderData.totalFlightTime != encoderData.prevTotalTime ||
        encoderData.flightCount != encoderData.prevFlightCount) {
        String newTotalText = "Total: " + formatTime(encoderData.totalFlightTime);
        
        if (newTotalText != encoderData.cachedTotalText) {
            encoderData.cachedTotalText = newTotalText;
            encoderData.totalTextDirty = false;
        }
    }
}

void setup() {
  setCpuFrequencyMhz(240);
  Serial.begin(115200);
  
  // Initialize display
  gfx->begin();
  gfx->fillScreen(BG_COLOR);
  pinMode(GFX_BL, OUTPUT);
  digitalWrite(GFX_BL, HIGH);
  
  // Display starting message
  gfx->setTextSize(3);
  gfx->setTextColor(TEXT_COLOR);
  gfx->setCursor(40, 100);
  gfx->println("Initializing...");
  
  // Initialize I2C and touch
  Wire.begin(TOUCH_SDA, TOUCH_SCL);
  loadSettings();
  touch.begin();
  touch.setRotation(ROTATION_INVERTED);
  
  // Initialize WiFi and ESP-NOW
  WiFi.mode(WIFI_STA);
  
  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW init failed!");
    return;
  }
  
  esp_now_register_recv_cb(OnDataRecv);
  
  // Create mutex and tasks
  displayMutex = xSemaphoreCreateMutex();
  
  // OPTIMIZATION: Increase display task priority and stack size
  xTaskCreatePinnedToCore(displayUpdateTask, "DisplayTask", 6144, NULL, 2, NULL, 1);
  xTaskCreatePinnedToCore(touchPollTask, "TouchTask", 2048, NULL, 1, NULL, 1);
  
  showConnectingScreen();
}

void loop() {
    unsigned long currentTime = millis();
    
    // Check connection status
    if (currentTime - lastDataReceived > lastDataTimeout && connected) {
        connected = false;
        showConnectingScreen();
    }
    
    delay(200);
}

void displayUpdateTask(void *parameter) {
    TickType_t xLastWakeTime = xTaskGetTickCount();
    const TickType_t xFrequency = 120 / portTICK_PERIOD_MS;
    unsigned long lastDistanceUpdate = 0;
    unsigned long lastTimerUpdate = 0;
    unsigned long lastFlightDataUpdate = 0;
    unsigned long lastAlertFlash = 0;
    bool alertFlashState = false;
    bool alertOverlayVisible = false;
    AlertState lastRenderedAlert = ALERT_NORMAL;
    bool lastFlashState = false;
    
    while(true) {
        unsigned long currentMillis = millis();
        
        // Update alert state
        previousAlertState = currentAlertState;
        currentAlertState = getCurrentAlertState();
        
        // Handle state changes with error checking
        if (currentAlertState != previousAlertState || screenTransition) {
            // Use longer timeout for screen transitions
            if (xSemaphoreTake(displayMutex, 500 / portTICK_PERIOD_MS) == pdTRUE) {
                if (currentScreen == MAIN_SCREEN) {
                    gfx->fillScreen(BG_COLOR);
                    // Reset all text bounds when doing full refresh
                    lastDistanceBounds.valid = false;
                    lastTimerBounds.valid = false;
                    lastAlertBounds.valid = false;
                    // Mark cached strings as dirty for full refresh
                    encoderData.distanceTextDirty = true;
                    encoderData.timeTextDirty = true;
                    encoderData.totalTextDirty = true;
                    // Force update cached strings before drawing
                    updateCachedStrings();
                    updateDisplayFull();
                    alertOverlayVisible = false;
                    lastRenderedAlert = ALERT_NORMAL;
                } else if (currentScreen == SETTINGS_SCREEN) {
                    drawSettingsScreen();
                }
                screenTransition = false;
                xSemaphoreGive(displayMutex);
            } else {
                // If we can't get mutex, skip this update
                Serial.println("Could not get display mutex for screen transition");
            }
        }
        
        // Update displays when connected
        if (connected && currentScreen == MAIN_SCREEN) {
            // Update cached strings first, outside mutex
            updateCachedStrings();
            
            if (xSemaphoreTake(displayMutex, 100 / portTICK_PERIOD_MS) == pdTRUE) {
                // Stagger updates to reduce load
                if (currentMillis - lastDistanceUpdate >= 200) {
                    updateDistanceDisplay();
                    lastDistanceUpdate = currentMillis;
                }
                else if (currentMillis - lastTimerUpdate >= 400) {
                    updateTimerDisplay();
                    lastTimerUpdate = currentMillis;
                }
                else if (currentMillis - lastFlightDataUpdate >= 800) {
                    updateFlightAndTotalDisplay();
                    lastFlightDataUpdate = currentMillis;
                }
                
                // Alert overlay handling
                bool shouldUpdateOverlay = false;
                bool newFlashState = alertFlashState;
                
                if (currentAlertState == ALERT_DANGER) {
                    if (currentMillis - lastAlertFlash >= 750) {
                        newFlashState = !alertFlashState;
                        lastAlertFlash = currentMillis;
                    }
                    shouldUpdateOverlay = (lastRenderedAlert != ALERT_DANGER || newFlashState != lastFlashState);
                } else if (currentAlertState == ALERT_TIME_EXCEEDED) {
                    newFlashState = true;
                    shouldUpdateOverlay = (lastRenderedAlert != ALERT_TIME_EXCEEDED);
                } else {
                    newFlashState = false;
                    shouldUpdateOverlay = (lastRenderedAlert != ALERT_NORMAL);
                }
                
                if (shouldUpdateOverlay) {
                    drawAlertOverlay(currentAlertState, newFlashState);
                    alertFlashState = newFlashState;
                    lastFlashState = newFlashState;
                    lastRenderedAlert = currentAlertState;
                    alertOverlayVisible = (currentAlertState != ALERT_NORMAL && newFlashState);
                }
                
                xSemaphoreGive(displayMutex);
            }
        }
        
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
    }
}

// OPTIMIZATION: More efficient text bounds clearing
void clearOptimizedTextBounds(OptimizedTextBounds &bounds) {
    if (bounds.valid) {
        gfx->fillRect(bounds.x, bounds.y, bounds.w, bounds.h, BG_COLOR);
    }
}

OptimizedTextBounds getOptimizedTextBounds(const String& text, int x, int y, bool useCustomFont) {
    OptimizedTextBounds bounds;
    int16_t x1, y1;
    uint16_t w, h;
    
    if (useCustomFont) {
        setCustomFont();  // Use helper function
        gfx->getTextBounds(text, 0, 0, &x1, &y1, &w, &h);
        
        int drawX = (gfx->width() - w) / 2;
        int drawY = y + h;
        
        bounds.x = drawX;
        bounds.y = y;
        bounds.w = w;
        bounds.h = h + 10;
        bounds.valid = true;
        bounds.lastText = text;
        
        resetFont();  // Use helper function
    } else {
        gfx->getTextBounds(text, x, y, &x1, &y1, &w, &h);
        bounds.x = x1;
        bounds.y = y1;
        bounds.w = w;
        bounds.h = h;
        bounds.valid = true;
        bounds.lastText = text;
    }
    
    return bounds;
}

void setCustomFont() {
    gfx->setFont(&FreeSansBold18pt7b);
}

void resetFont() {
    gfx->setFont();  // Reset to default font
}


void drawCustomText(const String& text, int x, int y, uint16_t color, bool center) {
    setCustomFont();  // Use helper function
    gfx->setTextColor(color);
    
    int16_t x1, y1;
    uint16_t w, h;
    gfx->getTextBounds(text, 0, 0, &x1, &y1, &w, &h);
    
    int drawX = center ? (gfx->width() - w) / 2 : x;
    int drawY = y + h;
    
    gfx->setCursor(drawX, drawY);
    gfx->print(text);
    resetFont();  // Use helper function
}

void drawAlertOverlay(AlertState alertState, bool flashState) {
    String alertText = "WINCH IN";
    
    if (alertState == ALERT_NORMAL) {
        gfx->fillRect(0, layout.alertOverlayY, gfx->width(), layout.alertOverlayHeight, BG_COLOR);
        lastAlertBounds.valid = false;
        lastAlertBounds.lastText = "";
        updateDistanceDisplay(true);
        return;
    }
    
    if (alertState == ALERT_DANGER && flashState) {
        gfx->fillRect(0, layout.alertOverlayY, gfx->width(), layout.alertOverlayHeight, RED);
        drawCustomText(alertText, 0, layout.alertOverlayY + 20, WHITE, true);
        lastAlertBounds = getOptimizedTextBounds(alertText, 0, layout.alertOverlayY + 20, true);
    }
    else if (alertState == ALERT_TIME_EXCEEDED) {
        gfx->fillRect(0, layout.alertOverlayY, gfx->width(), layout.alertOverlayHeight, ORANGE);
        drawCustomText(alertText, 0, layout.alertOverlayY + 20, BLACK, true);
        lastAlertBounds = getOptimizedTextBounds(alertText, 0, layout.alertOverlayY + 20, true);
    }
    else {
        gfx->fillRect(0, layout.alertOverlayY, gfx->width(), layout.alertOverlayHeight, BG_COLOR);
        lastAlertBounds.valid = false;
        lastAlertBounds.lastText = "";
        updateDistanceDisplay(true);
        return;
    }
}

void touchPollTask(void *parameter) {
    TickType_t lastTouchTime = 0;
    const TickType_t DEBOUNCE_DELAY = 300 / portTICK_PERIOD_MS; // 300ms debounce
    
    while(true) {
        // Read touch data (returns void)
        touch.read();
        
        if (touch.isTouched) {
            TickType_t currentTime = xTaskGetTickCount();
            
            // Debounce check
            if (currentTime - lastTouchTime < DEBOUNCE_DELAY) {
                vTaskDelay(50 / portTICK_PERIOD_MS);
                continue;
            }
            
            int touchX = touch.points[0].x;
            int touchY = touch.points[0].y;
            
            // Validate touch coordinates
            if (touchX < 0 || touchX >= TOUCH_WIDTH || touchY < 0 || touchY >= TOUCH_HEIGHT) {
                vTaskDelay(50 / portTICK_PERIOD_MS);
                continue;
            }
            
            // Use shorter timeout for mutex to prevent blocking
            if (xSemaphoreTake(displayMutex, 100 / portTICK_PERIOD_MS) == pdTRUE) {
                bool handled = false;
                
                if (currentScreen == SETTINGS_SCREEN) {
                    handled = handleSettingsTouch(touchX, touchY);
                } else if (currentScreen == MAIN_SCREEN && connected) {
                    if (isTitleTouched(touchX, touchY)) {
                        currentScreen = SETTINGS_SCREEN;
                        currentSettingIndex = 0;
                        screenTransition = true;
                        handled = true;
                    }
                }
                
                xSemaphoreGive(displayMutex);
                
                if (handled) {
                    lastTouchTime = currentTime;
                }
            }
            
            // Wait for touch release with timeout
            int releaseTimeout = 0;
            while (touch.isTouched && releaseTimeout < 10) {
                touch.read();
                vTaskDelay(50 / portTICK_PERIOD_MS);
                releaseTimeout++;
            }
        }
        
        vTaskDelay(50 / portTICK_PERIOD_MS); // Reduced from 200ms
    }
}

void OnDataRecv(const esp_now_recv_info_t *esp_now_info, const uint8_t *data, int data_len) {
  lastDataReceived = millis();
  bool wasDisconnected = !connected;
  connected = true;
  
  if (data_len == 21) {
    long pos;
    float distance;
    bool timer_running;
    unsigned long elapsed_time;
    unsigned long total_time;
    int flight_count;
    
    memcpy(&pos, data, 4);
    memcpy(&distance, data + 4, 4);
    memcpy(&timer_running, data + 8, 1);
    memcpy(&elapsed_time, data + 9, 4);
    memcpy(&total_time, data + 13, 4);
    memcpy(&flight_count, data + 17, 4);
    
    // OPTIMIZATION: Mark cached strings as dirty only when values change significantly
    if (abs(distance - encoderData.distanceFeet) >= 0.1) {
      encoderData.distanceTextDirty = true;
    }
    if (elapsed_time / 1000 != encoderData.elapsedTime / 1000) {
      encoderData.timeTextDirty = true;
    }
    if (total_time != encoderData.totalFlightTime || flight_count != encoderData.flightCount) {
      encoderData.totalTextDirty = true;
    }
    
    encoderData.rawPosition = pos;
    encoderData.distanceFeet = distance;
    encoderData.timerRunning = timer_running;
    encoderData.elapsedTime = elapsed_time;
    encoderData.totalFlightTime = total_time;
    encoderData.flightCount = flight_count;
    
    if (wasDisconnected) {
    encoderData.distanceTextDirty = true;
    encoderData.timeTextDirty = true; 
    encoderData.totalTextDirty = true;
    currentScreen = MAIN_SCREEN;
    screenTransition = true;
    }
    if (abs(encoderData.distanceFeet) > WARNING_DISTANCE + DANGER_OFFSET) {
      encoderData.status = "DANGER";
    } else if (abs(encoderData.distanceFeet) > WARNING_DISTANCE) {
      encoderData.status = "WARNING";
    } else {
      encoderData.status = "NORMAL";
    }
    
    if (wasDisconnected) {
      currentScreen = MAIN_SCREEN;
      screenTransition = true;
    }
  }
}

void loadSettings() {
  preferences.begin("app_settings", false);
  
  WARNING_DISTANCE = preferences.getFloat("warn_dist", 500.0);
  DANGER_OFFSET = preferences.getFloat("danger_offs", 20.0);
  TIME_THRESHOLD = preferences.getULong("time_thres", 420000);
  
  settings[0].value = WARNING_DISTANCE;
  settings[1].value = DANGER_OFFSET;
  settings[2].value = TIME_THRESHOLD / 60000;
  
  preferences.end();
}

void saveSettings() {
  preferences.begin("app_settings", false);
  
  preferences.putFloat("warn_dist", settings[0].value);
  preferences.putFloat("danger_offs", settings[1].value);
  preferences.putULong("time_thres", (unsigned long)(settings[2].value * 60000));
  
  WARNING_DISTANCE = settings[0].value;
  DANGER_OFFSET = settings[1].value;
  TIME_THRESHOLD = (unsigned long)(settings[2].value * 60000);
  
  preferences.end();
}

void drawSettingsScreen() {
    // Clear screen first
    gfx->fillScreen(BG_COLOR);
    
    // Draw title
    gfx->setTextColor(TEXT_COLOR);
    gfx->setTextSize(3);
    gfx->setCursor(10, 10);
    gfx->print("Settings");
    
    gfx->setTextSize(2);
    
    // Draw each setting with error checking
    for (int i = 0; i < MAX_SETTINGS_ITEMS && i < 3; i++) { // Bounds check
        int y = layout.settingFirstY + (i * layout.settingSpacing);
        
        // Ensure y is within screen bounds
        if (y < 0 || y > 400) continue;
        
        // Setting name
        gfx->setCursor(10, y + 20);
        gfx->setTextColor(TEXT_COLOR);
        gfx->print(settings[i].name);
        
        // Value display
        char valueStr[32]; // Increased buffer size
        if (i == 2) {
            String formattedTime = formatTimeForSettings(settings[i].value);
            snprintf(valueStr, sizeof(valueStr), "%s %s", 
                    formattedTime.c_str(), settings[i].unit.c_str());
        } else {
            snprintf(valueStr, sizeof(valueStr), "%.1f %s", 
                    settings[i].value, settings[i].unit.c_str());
        }
        
        gfx->setCursor(layout.valueX, y + 20);
        gfx->print(valueStr);
        
        // Draw buttons with bounds checking
        if (layout.minusX + layout.buttonWidth <= 800 && 
            layout.plusX + layout.buttonWidth <= 800) {
            
            // Minus button
            gfx->fillRect(layout.minusX, y + 10, layout.buttonWidth, layout.buttonHeight, BUTTON_COLOR);
            gfx->setTextColor(BG_COLOR);
            gfx->setCursor(layout.minusX + 35, y + 35);
            gfx->print("-");
            
            // Plus button
            gfx->fillRect(layout.plusX, y + 10, layout.buttonWidth, layout.buttonHeight, BUTTON_COLOR);
            gfx->setCursor(layout.plusX + 35, y + 35);
            gfx->print("+");
        }
    }
    
    // Draw save and back buttons with bounds checking
    if (layout.saveX + layout.saveWidth <= 800 && layout.saveY + layout.saveHeight <= 480) {
        // Save button
        gfx->fillRect(layout.saveX, layout.saveY, layout.saveWidth, layout.saveHeight, SAVE_COLOR);
        gfx->setTextColor(BG_COLOR);
        gfx->setTextSize(3);
        gfx->setCursor(layout.saveX + 60, layout.saveY + 50);
        gfx->print("SAVE");
        
        // Back button
        gfx->fillRect(10, layout.saveY, 120, layout.saveHeight, BUTTON_COLOR);
        gfx->setCursor(30, layout.saveY + 50);
        gfx->print("BACK");
    }
}

String formatTimeForSettings(float timeInMinutes) {
  int minutes = (int)timeInMinutes;
  int seconds = (int)((timeInMinutes - minutes) * 60);
  
  char timeStr[10];
  sprintf(timeStr, "%d:%02d", minutes, seconds);
  return String(timeStr);
}

bool handleSettingsTouch(int touchX, int touchY) {
    // Validate inputs
    if (touchX < 0 || touchY < 0) return false;
    
    // Back button
    if (touchY >= layout.saveY && touchY <= layout.saveY + layout.saveHeight && 
        touchX >= 10 && touchX <= 130) {
        currentScreen = MAIN_SCREEN;
        screenTransition = true;
        return true;
    }
    
    // Save button
    if (touchY >= layout.saveY && touchY <= layout.saveY + layout.saveHeight && 
        touchX >= layout.saveX && touchX <= layout.saveX + layout.saveWidth) {
        saveSettings();
        currentScreen = MAIN_SCREEN;
        screenTransition = true;
        return true;
    }
    
    // Setting adjustment buttons
    for (int i = 0; i < MAX_SETTINGS_ITEMS; i++) {
        int y = layout.settingFirstY + (i * layout.settingSpacing);
        
        if (touchY >= y && touchY <= y + layout.settingHeight) {
            bool valueChanged = false;
            
            // Minus button
            if (touchX >= layout.minusX && touchX <= layout.minusX + layout.buttonWidth) {
                if (settings[i].value > settings[i].minValue) {
                    settings[i].value -= settings[i].increment;
                    // Ensure we don't go below minimum due to floating point precision
                    if (settings[i].value < settings[i].minValue) {
                        settings[i].value = settings[i].minValue;
                    }
                    valueChanged = true;
                }
            }
            // Plus button
            else if (touchX >= layout.plusX && touchX <= layout.plusX + layout.buttonWidth) {
                if (settings[i].value < settings[i].maxValue) {
                    settings[i].value += settings[i].increment;
                    // Ensure we don't go above maximum due to floating point precision
                    if (settings[i].value > settings[i].maxValue) {
                        settings[i].value = settings[i].maxValue;
                    }
                    valueChanged = true;
                }
            }
            
            if (valueChanged) {
                // Use a flag to redraw in main task instead of calling directly
                screenTransition = true;
                return true;
            }
        }
    }
    
    return false;
}

bool isTitleTouched(int touchX, int touchY) {
  return (touchX >= layout.titleX && touchX <= layout.titleX + layout.titleTouchWidth &&
          touchY >= layout.titleY && touchY <= layout.titleY + layout.titleTouchHeight);
}

void showConnectingScreen() {
    if (xSemaphoreTake(displayMutex, portMAX_DELAY) == pdTRUE) {
        gfx->fillScreen(BG_COLOR);
        
        gfx->setTextSize(4);
        gfx->setCursor(40, 100);
        gfx->setTextColor(TEXT_COLOR);
        gfx->println("Waiting for connection");
        gfx->setCursor(40, 160);
        gfx->println("via ESP-NOW...");
        
        xSemaphoreGive(displayMutex);
    }
}

void updateDisplayFull() {
  gfx->fillScreen(BG_COLOR);
 
  gfx->setTextSize(4);
  gfx->setTextColor(DANGER_COLOR);
  gfx->setCursor(layout.titleX, layout.titleY);
  gfx->println("DON'T PANIC");
 
  gfx->setTextSize(2);
  gfx->setTextColor(NORMAL_COLOR);
  gfx->setCursor(layout.statusX, layout.statusY);
  gfx->print("Connected");
  
  updateDistanceDisplay(true);
  updateTimerDisplay(true);
  updateFlightAndTotalDisplay(true);
 
  encoderData.prevDistanceFeet = encoderData.distanceFeet;
  encoderData.prevStatus = encoderData.status;
  encoderData.prevFlightCount = encoderData.flightCount;
  encoderData.prevElapsedTime = encoderData.elapsedTime;
  encoderData.prevTimerRunning = encoderData.timerRunning;
  encoderData.prevTotalTime = encoderData.totalFlightTime;
}

void updateDistanceDisplay(bool force) {
    // Use cached string and only update if it actually changed
    if (!force && 
        encoderData.cachedDistanceText == lastDistanceBounds.lastText && 
        encoderData.status == encoderData.prevStatus) {
        return;
    }
    
    int statusColor;
    if (encoderData.status == "DANGER") {
        statusColor = DANGER_COLOR;
    } else if (encoderData.status == "WARNING") {
        statusColor = WARNING_COLOR;
    } else {
        statusColor = TEXT_COLOR;
    }
    
    // Clear only previous text bounds if valid (like timer display does)
    if (lastDistanceBounds.valid) {
        gfx->fillRect(lastDistanceBounds.x, lastDistanceBounds.y, 
                     lastDistanceBounds.w, lastDistanceBounds.h, BG_COLOR);
    } else {
        // Full clear only when necessary (like timer display does)
        gfx->fillRect(0, layout.distanceY, gfx->width(), layout.distanceHeight + 20, BG_COLOR);
    }
    
    // Set custom font and calculate bounds (exactly like timer display)
    gfx->setFont(&FreeSansBold18pt7b);
    gfx->setTextColor(statusColor);
    
    int16_t x1, y1;
    uint16_t w, h;
    gfx->getTextBounds(encoderData.cachedDistanceText, 0, 0, &x1, &y1, &w, &h);
    
    int drawX = (gfx->width() - w) / 2;
    int drawY = layout.distanceY + 20 + h;
    
    gfx->setCursor(drawX, drawY);
    gfx->print(encoderData.cachedDistanceText);
    
    // Update bounds with extra padding for variations (like timer display)
    lastDistanceBounds.x = drawX - 5;
    lastDistanceBounds.y = layout.distanceY + 20;
    lastDistanceBounds.w = w + 15;  // Extra width for digit variations
    lastDistanceBounds.h = h + 10;
    lastDistanceBounds.valid = true;
    lastDistanceBounds.lastText = encoderData.cachedDistanceText;
    
    // Reset font (exactly like timer display does)
    gfx->setFont();
    
    encoderData.prevDistanceFeet = encoderData.distanceFeet;
    encoderData.prevStatus = encoderData.status;
}

void updateTimerDisplay(bool force) {
    // Use cached string for more efficient comparison
    if (!force && 
        encoderData.cachedTimeText == lastTimerBounds.lastText &&
        encoderData.timerRunning == encoderData.prevTimerRunning) {
        return;
    }
    
    int timeColor = TEXT_COLOR;
    if (encoderData.timerRunning && encoderData.elapsedTime >= TIME_THRESHOLD) {
        timeColor = DANGER_COLOR;
    }
    
    // Clear only previous text bounds if valid
    if (lastTimerBounds.valid) {
        gfx->fillRect(lastTimerBounds.x, lastTimerBounds.y, 
                     lastTimerBounds.w, lastTimerBounds.h, BG_COLOR);
    } else {
        // Full clear only when necessary
        gfx->fillRect(0, layout.timerY, gfx->width(), layout.timerHeight + 20, BG_COLOR);
    }
    
    if (encoderData.timerRunning) {
        // Active timer - use custom font
        gfx->setFont(&FreeSansBold18pt7b);
        gfx->setTextColor(timeColor);
        
        int16_t x1, y1;
        uint16_t w, h;
        gfx->getTextBounds(encoderData.cachedTimeText, 0, 0, &x1, &y1, &w, &h);
        
        int drawX = (gfx->width() - w) / 2;
        int drawY = layout.timerY + 20 + h;
        
        gfx->setCursor(drawX, drawY);
        gfx->print(encoderData.cachedTimeText);
        
        // Update bounds with extra padding for rightmost digits
        lastTimerBounds.x = drawX - 5;
        lastTimerBounds.y = layout.timerY + 20;
        lastTimerBounds.w = w + 15;  // Extra width for digit variations
        lastTimerBounds.h = h + 10;
        lastTimerBounds.valid = true;
        lastTimerBounds.lastText = encoderData.cachedTimeText;
        
        gfx->setFont(); // Reset font
    } else {
        // Last flight - use regular font, but be more efficient
        gfx->setTextSize(3);
        gfx->setTextColor(timeColor);
        
        String fullText = "LAST FLIGHT: " + encoderData.cachedTimeText;
        
        gfx->setCursor(20, layout.timerY + 40);
        gfx->print(fullText);
        
        // Store bounds with padding for the regular font
        lastTimerBounds.x = 15;  // Slightly left of actual text
        lastTimerBounds.y = layout.timerY + 10;
        lastTimerBounds.w = fullText.length() * 18 + 20; // Extra width for variations
        lastTimerBounds.h = 60;
        lastTimerBounds.valid = true;
        lastTimerBounds.lastText = encoderData.cachedTimeText;
    }
    
    encoderData.prevElapsedTime = encoderData.elapsedTime;
    encoderData.prevTimerRunning = encoderData.timerRunning;
}

void updateFlightAndTotalDisplay(bool force) {
    // Use cached string for total time
    if (!force && 
        encoderData.flightCount == encoderData.prevFlightCount &&
        encoderData.cachedTotalText.length() > 0) {
        return;
    }
    
    // More targeted clearing - only clear the area we're about to redraw
    gfx->fillRect(0, layout.flightTotalY, gfx->width(), layout.flightTotalHeight, BG_COLOR);
    
    // Set text properties once
    gfx->setTextSize(4);
    gfx->setTextColor(TEXT_COLOR);
    
    // Flight count
    gfx->setCursor(20, layout.flightTotalY);
    gfx->print("Flights: ");
    gfx->print(encoderData.flightCount);
    
    // Use cached total text
    int totalTextWidth = encoderData.cachedTotalText.length() * 24; // Approximate width
    int totalX = gfx->width() - totalTextWidth - 20;
    
    gfx->setCursor(totalX, layout.flightTotalY);
    gfx->print(encoderData.cachedTotalText);
    
    encoderData.prevFlightCount = encoderData.flightCount;
    encoderData.prevTotalTime = encoderData.totalFlightTime;
}

String formatTime(unsigned long timeInMillis) {
    unsigned long seconds = timeInMillis / 1000;
    unsigned long hours = seconds / 3600;
    unsigned long minutes = (seconds % 3600) / 60;
    seconds = seconds % 60;
    
    char timeStr[12];
    if (hours > 0) {
        sprintf(timeStr, "%lu:%02lu:%02lu", hours, minutes, seconds);
    } else {
        sprintf(timeStr, "%lu:%02lu", minutes, seconds);
    }
    return String(timeStr);
}
